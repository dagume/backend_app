#Categorias
type Accounting_movement {
    id:ID!
    puc:Puc
    project:Project
    destination:Contact
    destination_role_id:Int
    origin:Contact
    origin_role_id:Int
    registration_date:Date
    movement_date:Date
    payment_method:pay_meth
    value:Int
    state_movement:Boolean
    sender_id:Int
    code:String
    document_references:[Document_reference]
    activity_id:Int
}
enum pay_meth{
    Efectivo @enum(value: 0)
    TarjetaCredito @enum(value: 1)
    PSE @enum(value: 2)
    Transferencia @enum(value: 3)
}

enum type_mov{
    Ingreso @enum(value: 0)
    Gasto @enum(value: 1)
    Transferencia @enum(value: 2)

}
#Mensaje exitoso de creacion
type MessageSuccessAccountMovement {
    accounting_movement:Accounting_movement
    message: String
    type:String
}

extend type Query{
    #movimiento
    movement(id:Int! @eq): Accounting_movement @find(model:"App\\Accounting_movement")
    #movimientos entre cuentas
    #account_movement(puc_id: Int! @eq): Accounting_movement @find(model: "App\\Accounting_movement") #@middleware(checks:["auth:api"])
    #movimientos entre cuentas desde un project
    puc_movements(puc_id:Int @where(operator: "=")
    project_id:Int @where(operator: "=")
    ): [Accounting_movement] @all(model: "App\\Accounting_movement") #@middleware(checks:["auth:api"])
    #hist√≥rico de movimientos entre el proyecto y un contacto
    movements_project_contact(
        project_id:Int! @where(operator: "=")
        origin_id:Int @where(operator: "=")
        origin_role_id:Int  @where(operator: "=")
        destination_id:Int @where(operator: "=")
        destination_role_id:Int  @where(operator: "=")
    ):[Accounting_movement] @all(model: "App\\Accounting_movement")

    #Aportes de socios en un proyecto
    partner_contributions(project_id: Int! role_id: Int!): [Accounting_movement] @field(resolver: "App\\GraphQL\\Queries\\Partner_contributions@resolve") #@middleware(checks:["auth:api", "can:activity.list"])
    #Aportes de un socio
    a_partner_contributions(project_id: Int! contact_id:Int!): [Accounting_movement] @field(resolver: "App\\GraphQL\\Queries\\A_partner_contributions@resolve") #@middleware(checks:["auth:api", "can:activity.list"])
    #Aportes y reembolsos de socio o prestamista en un proyecto
    partner_contributions_and_refunds(project_id: Int! contact_id:Int! role_id:Int!): [Accounting_movement] @field(resolver: "App\\GraphQL\\Queries\\Partner_contributions_and_refunds@resolve") #@middleware(checks:["auth:api", "can:activity.list"])
    #Registro de egresos en general del proyecto
    project_expenses(project_id: Int!): [Accounting_movement] @field(resolver: "App\\GraphQL\\Queries\\Project_expenses@resolve") #@middleware(checks:["auth:api", "can:activity.list"])
    #Registro de egresos por concepto del proyecto
    project_expenses_for_concept(project_id: Int! puc_id:Int!): [Accounting_movement] @field(resolver: "App\\GraphQL\\Queries\\Project_expenses_for_concept@resolve") #@middleware(checks:["auth:api", "can:activity.list"])
    #Registro de ingresos del proyecto
    project_income(project_id: Int!): [Accounting_movement] @field(resolver: "App\\GraphQL\\Queries\\Project_income@resolve") #@middleware(checks:["auth:api", "can:activity.list"])

}
extend type Mutation {
    #movimientos (Gastos e ingresos)
    create_movement(
        puc_id: Int @rules(apply: ["nullable"])
        project_id: Int @rules(apply: ["required","integer"])
        destination_id: Int @rules(apply: ["required","integer"])
        destination_role_id:Int
        origin_id: Int @rules(apply: ["required","integer"])
        origin_role_id:Int
        movement_date:Date @rules(apply: ["date"])
        payment_method:pay_meth
        value:Int @rules(apply: ["required","integer"])
        code:String @rules(apply: ["nullable", "max:100"])
    ):MessageSuccessAccountMovement @field(resolver: "App\\GraphQL\\Mutations\\Create_movement@resolve") @middleware(checks:["auth:api"])

    #Transaciones entre cuentas
    #create_transaction(
    #    project_id: Int @rules(apply: ["required","integer"])
    #    destination_id: Int @rules(apply: ["integer"])
    #    origin_id: Int @rules(apply: ["required","integer"])
    #    movement_date:Date @rules(apply: ["date"])
    #    payment_method:pay_meth
    #    value:Int @rules(apply: ["required","integer"])
    #):MessageSuccessAccountMovement @field(resolver: "App\\GraphQL\\Mutations\\Create_transaction@resolve") @middleware(checks:["auth:api"])
}
