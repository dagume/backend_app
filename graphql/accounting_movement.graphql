#Categorias
type Accounting_movement {
    id:ID!
    puc:Puc
    project:Project
    destination:Member
    origin:Member
    registration_date:Date
    movement_date:Date
    payment_method:String
    value:Int
    state_movement:Boolean
    sender_id:Int
    code:String
    #exist_code:Boolean 
    type_movement:type_mov   
}
enum type_mov{
    Ingreso @enum(value: 0)
    Gasto @enum(value: 1)
    Transferencia @enum(value: 2)
}
#Mensaje exitoso de creacion
type MessageSuccessAccountMovement {
    accounting_movement:Accounting_movement
    message: String
}

extend type Query{
    #movimiento
    movement(id:Int! @eq): Accounting_movement @find(model:"App\\Accounting_movement")
    #movimientos entre cuentas
    #account_movement(puc_id: Int! @eq): Accounting_movement @find(model: "App\\Accounting_movement") #@middleware(checks:["auth:api"])
    #movimientos entre cuentas desde un project
    puc_movements(puc_id:Int @where(operator: "=") project_id:Int @where(operator: "=")): [Accounting_movement] @all(model: "App\\Accounting_movement") #@middleware(checks:["auth:api"])
}
extend type Mutation {
    #movimientos entre cuentas
    create_movement(
        puc_id: Int @rules(apply: ["nullable"])
        project_id: Int @rules(apply: ["required","integer"])
        destination_id: Int @rules(apply: ["integer"])
        origin_id: Int @rules(apply: ["required","integer"])
        movement_date:Date @rules(apply: ["date"])
        payment_method:String @rules(apply: ["required", "max:255"])
        value:Int @rules(apply: ["required","integer"])
        state_movement:Boolean
        code:String  
        type_movement:type_mov @rules(apply: ["required"])
    ):MessageSuccessAccountMovement @field(resolver: "App\\GraphQL\\Mutations\\Create_movement@resolve") @middleware(checks:["auth:api"])
}
