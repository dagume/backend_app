#Contact
type Contact {#implements GlobalSearch{
    id:ID!
    parent_contact:Contact
    role:Role
    type:contactType
    name:String
    lastname:String
    identification_type:contactIdType
    identification_number:Int
    email:String
    phones:String
    state:Int
    locate:String
    city:String
    regime:contactRegime
    address:String
    web_site:String
    password: String
    folder_id:String

    members:[Member]
    orders:[Order]
    quotations:[Quotation]
    documents_contact:[Document_contact]
}

type Doc_contact{
    doc_id:Int
    folder_id:String
    created_at:Date
    updated_at:Date
    drive_id:String
    name_required_documents:String
    role_id:Int
}

#regimen del contacto
enum contactRegime{
    No_Responsable_IVA
    Responsable_IVA
    Autoretenedor
}

#tipos de contacto
enum contactType{
    proyecto @enum(value: 0)
    persona @enum(value: 1)
    empresa @enum(value: 2)
}

#Tipo de identificacion Contacto
enum contactIdType{
    CC @enum(value: 1)
    nit @enum(value: 2)
    pasaporte @enum(value: 3)
    extranjera @enum(value: 4)
}

#Mensaje exitoso de creacion
type MessageSuccessContact {
    contact:Contact
    message: String
}
extend type Query{

    #Query documentos requerido por contacto
    require_doc_contact(contact_id: Int! @eq): [Doc_contact] @field(resolver: "App\\GraphQL\\Queries\\Contact@resolve") @middleware(checks:["auth:api"])

    #Query Contacts
    filter_name_contact(searchText: String!): [Contact] @field(resolver: "App\\GraphQL\\Queries\\Filter_contact@resolve")@middleware(checks:["auth:api", "can:contact.list"])

    #ver listado de projectos por filtro se usa para poder agregar miembros (solo si tiene permiso de hacerlo)
    filter_contacts(searchText: String!): [Contact] @field(resolver: "App\\GraphQL\\Queries\\Filter_contact_enable@resolve") @middleware(checks:["auth:api", "can:member.create"])

    #ver detalle de un contacto(Solo si tiene el permiso de hacerlo)
    contact(id:ID! @eq): Contact @find(model: "App\\User") @middleware(checks:["auth:api", "can:project.show"])

    #ver detalle de mi perfil(Solo si es el mismo usuario logueado quien quiere hacerlo)
    my_profile(id:ID! @eq): Contact @find(model: "App\\User") @can(ability: "view", model: "App\\Project") @middleware(checks:["auth:api"])

    #ver listado de projectos por tipo o TODOS(type = null o vacio )(solo si tiene permiso de hacerlo)
    contacts(type:Int): [Contact] @paginate(builder: "App\\GraphQL\\Queries\\Contacts@visibleContacts") @middleware(checks:["auth:api", "can:contact.list"])

    #filter_name_contact(name: String!  @where(operator: "ilike")): [Contact] @all(model: "App\\User") @middleware(checks:["auth:api"])
    #contactsType(type:contactType @where(operator: "=")): [Contact!]! @all(model: "App\\User")  #@middleware(checks:["auth:api"])
    #contacts_paginator: [Contact]! @paginate(type: "paginator" model: "App\\User") #@middleware(checks:["auth:api"])
}
extend type Mutation {
    #Contacts
    createContact(
        parent_contact_id: Int @rules(apply: ["nullable"])
        #Agregar el de asignar role y revisar mutation
        type: contactType @rules(apply: ["required", "integer"])
        name: String @rules(apply: ["required", "max:255"])
        lastname: String @rules(apply: ["max:255"])
        identification_type: contactIdType
        identification_number: Int @rules(apply: ["required","unique:contacts,identification_number"])
        email: String @rules(apply: ["required", "max:255","unique:contacts,email"])
        phones:String @rules(apply: ["max:30"])
        locate:String @rules(apply: ["max:255"])
        city:String @rules(apply: ["max:255"])
        regime:contactRegime @rules(apply: ["max:50", "nullable"])
        address:String @rules(apply: ["max:255"])
        web_site:String @rules(apply: ["max:255"])
        password: String @bcrypt @rules(apply: ["min:8", "nullable"])
    ):  MessageSuccessContact @field(resolver: "App\\GraphQL\\Mutations\\CreateContact@resolve") @middleware(checks:["auth:api", "can:contact.create"])

    updateContact(
        id: ID! @rules(apply: ["required"])
        name: String @rules(apply: ["max:255"])
        lastname: String @rules(apply: ["max:255"])
        identification_type: contactIdType @rules(apply: ["integer"])
        identification_number: Int @rules(apply: ["integer"])
        email: String @rules(apply: ["max:255"])
        phones:String @rules(apply: ["max:30"])
        state:Int @rules(apply: ["integer"])
        locate:String @rules(apply: ["max:255"])
        city:String @rules(apply: ["max:255"])
        regime:contactRegime @rules(apply: ["max:50", "nullable"])
        address:String @rules(apply: ["max:255"])
        web_site:String @rules(apply: ["max:255"])
    ): Contact @update(model: "App\\User") @middleware(checks:["auth:api", "can:contact.edit"])

    updateProfile(
        id: ID! @rules(apply: ["required"])
        name: String @rules(apply: ["max:255"])
        lastname: String @rules(apply: ["max:255"])
        identification_type: contactIdType @rules(apply: ["integer"])
        identification_number: Int @rules(apply: ["integer"])
        email: String @rules(apply: ["max:255"])
        phones:String @rules(apply: ["max:30"])
        #state:Int @rules(apply: ["integer"])
        locate:String @rules(apply: ["max:255"])
        city:String @rules(apply: ["max:255"])
        regime:contactRegime @rules(apply: ["max:50", "nullable"])
        address:String @rules(apply: ["max:255"])
        web_site:String @rules(apply: ["max:255"])
    ): Contact @update(model: "App\\User") @can(ability: "update", model: "App\\User") @middleware(checks:["auth:api"])

    updateContactState(
        id: ID! @rules(apply: ["required"])
        state:Int @rules(apply: ["required"])
    ): Contact @update(model: "App\\User") @middleware(checks:["auth:api", "can:contact.edit"])
}
