#plan unico de cuentas
type Puc{
    id: ID!
    son_pucs: [Puc]
    parent_pucs:Puc
    name: String
    description: String
    accounting_movements:[Accounting_movement]
}

type PucLevels{
    firstlevel_id:Int
    firstlevel_name:String
    secondlevel_id:Int
    secondlevel_name:String
    thirdlevel_id:Int
    thirdlevel_name:String
}
type MessageSuccessPuc{
    puc:Puc
    message:String
    type:String
}

extend type Query{
    #Query Puc
    pucs_thirdLevel(project_id:Int!): [PucLevels!] @field(resolver: "App\\GraphQL\\Queries\\Pucs_ThirdLevel@resolve") @middleware(checks:["auth:api", "can:puc.list"])
    pucs: [Puc] @all(model: "App\\Puc") @middleware(checks:["auth:api"]) @middleware(checks:["auth:api", "can:puc.list"])
    puc(id:Int @eq name:String @eq): Puc @find(model: "App\\Puc") @middleware(checks:["auth:api", "can:puc.show"])
    pucs_parent(parent_puc_id: Int @where(operator: "=")): [Puc] @all(model: "App\\Puc") @middleware(checks:["auth:api", "can:puc.list"])
}
extend type Mutation{

    #Crear PUC
    create_puc(
        id:Int! @rules(apply: ["required","unique:puc,id"])
        parent_puc_id:Int @rules(apply: ["required"])
        name:String @rules(apply: ["required", "max:300"])
        description:String @rules(apply: ["max:500"])
    ):MessageSuccessPuc @field(resolver: "App\\GraphQL\\Mutations\\CreatePuc@resolve") @middleware(checks:["auth:api", "can:puc.create"])

    #Editar PUC
    update_puc(
        id:ID! @rules(apply: ["required"])
        parent_puc_id:Int
        name:String @rules(apply: ["max:300"])
        description:String @rules(apply: ["max:500"])
    ):MessageSuccessPuc @field(resolver: "App\\GraphQL\\Mutations\\UpdatePuc@resolve") @middleware(checks:["auth:api", "can:puc.edit"])

    #Eliminar PUC
    deletePuc(
        id: ID!
    ): MessageSuccessPuc @field(resolver: "App\\GraphQL\\Mutations\\DeletePuc@resolve") @middleware(checks:["auth:api", "can:puc.delete"])

}
