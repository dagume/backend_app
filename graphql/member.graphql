#Miembros
type Member{
    id:ID!
    project:Project
    contact:Contact
    role:Role
    state:Int
}
#Mensaje exitoso de creacion
type MessageSuccessMember {
    member:Member
    message: String
}
extend type Query{
    #Members
    members: [Member] @paginate(type: "paginator" model: "App\\Member") @middleware(checks:["auth:api"])
    members_provider(project_id:Int @where(operator: "=") role_id:Int @where(operator: "=")):[Member] @all(model: "App\\Member")  #@middleware(checks:["auth:api"])
}
extend type Mutation {
    #member
    member_has_project(
        project_id: Int @rules(apply: ["integer", "required"])
        contact_id: Int @rules(apply: ["integer","required"])
        role_id:     Int @rules(apply: ["integer","required"])
        state:  Int = 1
    ):MessageSuccessMember @field(resolver: "App\\GraphQL\\Mutations\\Member_has_project@resolve")

    delete_member(id: ID!): Member @delete
}
