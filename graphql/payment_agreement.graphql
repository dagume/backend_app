#plan unico de cuentas
type PaymentAgreement{
    id: ID!
    order:Order
    pay_date:Date
    amount:Int
    state:Boolean
    #next_pay:Date
}
type MessageSuccessAgreement {
    payment_agreement:PaymentAgreement
    message: String
}
type payAgreDate{
    id:Int
    pay_date:Date
    amount:Int
    state:Boolean
    order_id:Int
    name:String
}
extend type Query{
    #Query Puc
    PaymentAgreements: [PaymentAgreement] @all(model: "App\\PaymentAgreement") #@middleware(checks:["auth:api"])  #, "can:project.list"

    todayPaymentAgreement: [PaymentAgreement] @field(resolver: "App\\GraphQL\\Queries\\TodayPaymentAgreement@resolve")
    weekPaymentAgreement: [PaymentAgreement] @field(resolver: "App\\GraphQL\\Queries\\WeekPaymentAgreements@resolve")
    monthPaymentAgreement: [PaymentAgreement] @field(resolver: "App\\GraphQL\\Queries\\MonthPaymentAgreements@resolve")

    paymentAgreementsDate(pay_date: Date! project_id: Int!): [payAgreDate] @field(resolver: "App\\GraphQL\\Queries\\PaymentAgreementsDate@resolve") #@middleware(checks:["auth:api"])  #, "can:project.list"

    #pucs_thirdLevel: [PucLevels!] @field(resolver: "App\\GraphQL\\Queries\\Pucs_ThirdLevel@resolve") #@middleware(checks:["auth:api"])
    #pucs: [Puc] @all(model: "App\\Puc") @middleware(checks:["auth:api"])  #, "can:project.list"    
    #pucs_parent(parent_puc_id: Int @where(operator: "=")): [Puc] @all(model: "App\\Puc") #@middleware(checks:["auth:api"])  #, "can:project.list"        
}
extend type Mutation{
    createPaymentAgreement(
        order_id:Int
        pay_date:Date
        amount:Int
        state:Boolean
    ):PaymentAgreement @create(model: "App\\PaymentAgreement") 
}