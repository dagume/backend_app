#Proyecto
type Project {#implements GlobalSearch{
    id: ID!
    project_type:Project_type
    parent_project:Project
    name: String
    start_date: Date
    end_date: Date
    description: String
    contract_value: Int
    expenses: Int
    progress: Int
    state: state_project
    place:String
    address:String
    type:typeProject
    association:associationProject
    consortium_name:String
    consortium_nit:Int
    folder_id: String
    members: [Member]
    activities:[Activity]
    orders: [Order]
    document_references:[Document_reference]
}

#Tipos proyecto
enum typeProject {
    publico @enum(value: 0)
    privado @enum(value: 1)
}
#association proyecto
enum associationProject {
    APP @enum(value: 0)
    consorcio @enum(value: 1)

}
enum state_project {
    Seleccion @enum(value: 1)
    Contratado @enum(value: 2)
    Finalizado @enum(value: 3)
    Suspendido @enum(value: 4)
    Archivado @enum(value: 5)
}
type MessageSuccessProject {
    project:Project
    message: String
}
type TotalAmount{
    amount:Int
}
type ProjectName{
    id:ID
    name:String
}
input placeProject{
    longitud:String @rules(apply: ["required"])
    latitud: String @rules(apply: ["required"])

}

input OrderByClause{
    field: String!
    order: SortOrder!
}

enum SortOrder {
    ASC
    DESC
}


extend type Query
{
    #Buscador de proyecto por nombre
    #filter_name_Project(name: String! @where(operator: "ilike") parent_project_id: Int @where(operator: "!=")): [Project] @all(model: "App\\Project") @can(ability: "viewAny", model: "App\\Project") @middleware(checks:["auth:api", "can:project.list"])
    filter_name_Project(name: String! ): [ProjectName] @field(resolver: "App\\GraphQL\\Queries\\FilterNameProject@resolve") @can(ability: "viewAny", model: "App\\Project") @middleware(checks:["auth:api", "can:project.list"])

    #ver proyecto en especifico
    project(id:ID! @eq): Project @find(model: "App\\Project") @can(ability: "view", model: "App\\Project") @middleware(checks:["auth:api", "can:project.show"])

    #lista los proyectos padre para asignar al momento de crear un nuevo proyecto
    projects_parent(parent_project_id: Int @where(operator: "=")): [Project!]! @all(model: "App\\Project")

    #Lista proyectos con todos los filtros
    projects_paginator_with_parent(state: state_project! orderBy: [OrderByClause!] @orderBy):[Project] @paginate(builder: "App\\GraphQL\\Queries\\ProjectsPermission@visibleProjects") @can(ability: "viewAny", model: "App\\Project") @middleware(checks:["auth:api", "can:project.list"])

    #Lista el folder_id para soportes (No lleva politica ni permiso solo lo usa front)
    folder_supports(project_id:Int!):Document_reference @field(resolver: "App\\GraphQL\\Queries\\Folder_supports@resolve") #@can(ability: "view", model: "App\\Project") @middleware(checks:["auth:api", "can:project.list"])

    #Traer el total del contrato(Sumando actas, No lleva politica ni permiso solo lo usa front)
    get_contract_value(project_id:Int!): TotalAmount @field(resolver: "App\\GraphQL\\Queries\\Contract_value@resolve")#@middleware(checks:["auth:api"])

    #projects_paginator_with_parent(state: state_project @where(operator: "=") parent_project_id: Int @where(operator: "!=") orderBy: [OrderByClause!] @orderBy): [Project] @paginate(type: "paginator" model: "App\\Project") @can(ability: "viewAny", model: "App\\Project") @middleware(checks:["auth:api", "can:project.list"])
    #state_projects(state: state_project @where(operator: "=")): [Project]! @paginate(type: "paginator" model: "App\\Project") #@middleware(checks:["auth:api"])
    #projects: [Project!]! @all(model: "App\\Project") @middleware(checks:["auth:api"])  #, "can:project.list"
    #projects_paginator: [Project]! @paginate(type: "paginator" model: "App\\Project") #@middleware(checks:["auth:api"])
    #projects_with_parent(parent_project_id: Int @where(operator: "!=")): [Project!]! @all(model: "App\\Project") #@middleware(checks:["auth:api"])
}
extend type Mutation {

    #Crear Proyecto
    createProject(
        project_type_id: Int @rules(apply: ["integer","required"])
        parent_project_id: Int
        name: String @rules(apply: ["required", "max:255","unique:projects,name"])
        start_date: Date @rules(apply: ["nullable","date"])
        end_date: Date @rules(apply: ["nullable","date"])
        description: String @rules(apply: ["nullable"])
        contract_value: Int
        state: state_project
        place: [placeProject]
        address: String
        type: typeProject @rules(apply: ["nullable"])
        association: associationProject
        consortium_name:String
        consortium_nit:Int
    ): MessageSuccessProject @field(resolver: "App\\GraphQL\\Mutations\\CreateProject@resolve") @middleware(checks:["auth:api", "can:project.create"])

    #Editar Proyecto
    updateProject(
        id: ID! @rules(apply: ["required"])
        name: String @rules(apply: ["max:255"])
        start_date: Date @rules(apply: ["nullable","date"])
        end_date: Date @rules(apply: ["nullable","date"])
        description: String @rules(apply: ["nullable"])
        contract_value: Int
        state: state_project
        place: [placeProject]
        address: String
        association: associationProject
        consortium_name:String
        consortium_nit:Int
    ): Project @update(model: "App\\Project") @can(ability: "update", model: "App\\Project") @middleware(checks:["auth:api", "can:project.edit"])

    #Editar estado Proyecto
    updateStateProject(
        id: ID! @rules(apply: ["required"])
        state: state_project @rules(apply: ["required"])
    ): Project @update(model: "App\\Project") @middleware(checks:["auth:api", "can:project.destroy"])
}
