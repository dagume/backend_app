#Actividades
type Activity { #implements GlobalSearch{
    id:ID!
    project:Project #(category: String @eq(key: "project_id"))
    activities:[Activity]
    name:String!
    description:String
    date_start:Date
    date_end:Date
    state:stateActivity
    completed:Boolean
    priority:priorityActivity
    notes: String
    amount:Int
    is_added:Boolean
    drive_id:String
    is_act:Boolean
    type:typeActivity
    document_references:[Document_reference]
}
#estados de actividad
enum stateActivity{
    Archivado @enum(value: 1)
    Completado @enum(value: 2)
    Proceso @enum(value: 3)
    Atrasado @enum(value: 4)
}

#tipo de actividad
enum typeActivity{
    Contractual @enum(value: 0)
    Obra @enum(value: 1)
}

#estados de actividad
enum priorityActivity{
    Alta
    Media
    Baja
}

#Mensaje exitoso de creacion
type MessageSuccessActivity {
    activity:Activity
    message: String
    type: String
}
#Reporte de Total de ingresos del proyecto
type MessageTotalActsProject {
    totalActs:Activity
}

extend type Query{
    #Actividades
    activities_parent(parent_activity_id: Int @where(operator: "=") project_id: ID @where(operator: "=")): [Activity!]! @all(model: "App\\Activity") @middleware(checks:["auth:api", "can:activity.list"])
    added_activities(is_added: Boolean! @where(operator: "=")): [Activity] @all(model: "App\\Activity") @middleware(checks:["auth:api", "can:activity.list"])
    activity(id:ID @eq): Activity @field(resolver: "App\\GraphQL\\Queries\\AllActivity@resolve") @middleware(checks:["auth:api", "can:activity.show"])
    todayActivities: [Activity] @field(resolver: "App\\GraphQL\\Queries\\TodayActivities@resolve") @middleware(checks:["auth:api", "can:activity.list"])
    weekActivities: [Activity] @field(resolver: "App\\GraphQL\\Queries\\WeekActivities@resolve") @middleware(checks:["auth:api", "can:activity.list"])
    monthActivities: [Activity] @field(resolver: "App\\GraphQL\\Queries\\MonthActivities@resolve") @middleware(checks:["auth:api", "can:activity.list"])
    state_activities(state: stateActivity! @where(operator: "=") project_id:Int! @where(operator: "=")): [Activity] @all(model: "App\\Activity") @middleware(checks:["auth:api", "can:activity.list"])
    totalActsProject(project_id: Int!): MessageTotalActsProject @field(resolver: "App\\GraphQL\\Queries\\TotalActsProject@resolve") #@middleware(checks:["auth:api", "can:activity.list"])
}

extend type Mutation {
     #Crear actividad
    createActivity(
        project_id: Int @rules(apply: ["integer", "required"])
        parent_activity_id: Int @rules(apply: ["integer", "nullable"])
        name: String @rules(apply: ["required" ])
        description: String @rules(apply: ["nullable", "max:700"])
        date_start: Date @rules(apply: ["date","required"])
        date_end: Date @rules(apply: ["date","required"])
        state: stateActivity
        completed:Boolean
        priority:priorityActivity
        notes:String @rules(apply: ["nullable", "max:1024"])
        amount: Int @rules(apply: ["integer"])
        is_added: Boolean @rules(apply: ["required"])
        is_act:Boolean @rules(apply: ["required"])
        type:typeActivity @rules(apply: ["required"])
        payment_method:pay_meth
    ): MessageSuccessActivity @field(resolver: "App\\GraphQL\\Mutations\\CreateActivity@resolve") @middleware(checks:["auth:api", "can:activity.create"])

    #Editar actividad
    updateActivity(
        id:ID! @rules(apply: ["required"])
        name:String @rules(apply: ["max:300"])
        completed:Boolean
        description:String @rules(apply: ["nullable", "max:700"])
        priority:String
        notes:String @rules(apply: ["nullable", "max:1024"])
        state:stateActivity
        amount:Int @rules(apply: ["integer"])
        date_start:Date @rules(apply: ["date"])
        date_end:Date @rules(apply: ["date"])
        type:typeActivity
    ): MessageSuccessActivity @field(resolver: "App\\GraphQL\\Mutations\\UpdateActivity@resolve") @middleware(checks:["auth:api", "can:activity.edit"])

    delete_activity(
        id: ID!
    ): MessageSuccessActivity @field(resolver: "App\\GraphQL\\Mutations\\DeleteActivity@resolve") @middleware(checks:["auth:api", "can:activity.destroy"])

}
