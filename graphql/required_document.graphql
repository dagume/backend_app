#Documentos requeridos
type Required_documents {
  id: ID!
  name_required_documents: String    
}

extend type Query{
    #Documentos requeridos
    requiredDocument:[Required_documents] @all(model:"App\\Required_documents")
    #Products
    #filter_name_product(name: String! @where(operator: "ilike")): [Product] @all(model: "App\\Product") #@middleware(checks:["auth:api"])
    #product(name: String! @eq id:ID @eq): Product @find(model: "App\\Product") #@middleware(checks:["auth:api"])
    #products: [Product!]! @all(model: "App\\Product") #@middleware(checks:["auth:api"])
    #products_paginator: [Product] @paginate(type: "paginator" model: "App\\Product") #@middleware(checks:["auth:api"])
}

extend type Mutation {
    #Documentos requeridos
    createRequiredDocument(
      name_required_documents:String @rules(apply:["required", "unique:required_documents,name_required_documents"])
    ):Required_documents @create(model: "App\\Required_documents")

    updateRequiredDocument(
      id:ID!
      name_required_documents:String
    ):Required_documents @update(model: "App\\Required_documents")
    ##Product
    #createProduct(
    #    category_id: Int! @rules(apply: ["required","integer"])
    #    name: String! @rules(apply: ["required", "max:255","unique:products,name"])
    #    description: String @rules(apply: ["max:255"])
    #):MessageSuccessProduct @field(resolver: "App\\GraphQL\\Mutations\\CreateProduct@resolve") #@middleware(checks:["auth:api"])
    #
    #updateProduct(
    #    id: ID! @rules(apply: ["required"])
    #    category_id: Int! @rules(apply: ["required"])
    #    name: String! @rules(apply: ["required", "max:255","unique:products,name"])
    #    description: String @rules(apply: ["max:255"])
    #): Product @update(model: "App\\Product")
#
    #deleteProducto(id: ID!): MessageSuccessProduct @field(resolver: "App\\GraphQL\\Mutations\\DeleteProduct@resolve")

}