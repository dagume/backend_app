#Categorias
type Category {#implements GlobalSearch{
    id:ID!
    name:String!
    description:String
    Products:[Product]
}
#Mensaje exitoso de creacion
type MessageSuccessCategory {
    category:Category
    message: String
    type:String
}
extend type Query{
    #Categories
    category(name: String @eq id:ID @eq): Category @find(model: "App\\Category") @middleware(checks:["auth:api", "can:category.show"])
    categories: [Category!]! @all(model: "App\\Category") @middleware(checks:["auth:api", "can:category.list"])

    #categories_paginator: [Category] @paginate(type: "paginator" model: "App\\Category") @middleware(checks:["auth:api", "can:category.list"])
}
extend type Mutation {
    #Category
    createCategory(
        name: String @rules(apply: ["required", "max:200","unique:category,name"])
        description: String @rules(apply: ["max:700"])
    ):MessageSuccessCategory @field(resolver: "App\\GraphQL\\Mutations\\CreateCategory@resolve") @middleware(checks:["auth:api", "can:category.create"])

    updateCategory(
        id: ID! @rules(apply: ["required"])
        name: String @rules(apply: ["max:200"])
        description: String @rules(apply: ["max:700"])
    ): MessageSuccessCategory @field(resolver: "App\\GraphQL\\Mutations\\UpdateCategory@resolve") @middleware(checks:["auth:api", "can:category.edit"])

    deleteCategory(
        id: ID!
    ): MessageSuccessCategory @field(resolver: "App\\GraphQL\\Mutations\\DeleteCategory@resolve") @middleware(checks:["auth:api", "can:category.destroy"])
}
