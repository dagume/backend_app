#Role
type Role {
  id: ID!
  name: String!
  slug: String!
  description: String
  special: String
  is_visible:Boolean
  permissions: [Permission]
  required_documents:[Required_documents]
}
type MessageSuccessRole{
    role:Role
    message:String
}

extend type Query{
    #Query roles
    role(name: String! @eq): Role @find(model: "Caffeinated\\Shinobi\\Models\\Role") #@middleware(checks:["auth:api"])
    roles(is_visible:Boolean! @where(operator: "=")): [Role!]! @all(model: "Caffeinated\\Shinobi\\Models\\Role") #@middleware(checks:["auth:api"])
    roles_paginator: [Role]! @paginate(type: "paginator" model: "Caffeinated\\Shinobi\\Models\\Role") #@middleware(checks:["auth:api"])
}
extend type Mutation{  
    role_requiredDoc(
      role_id:Int
      required_doc:[Int]
    ):MessageSuccessRole @field(resolver:"App\\GraphQL\\Mutations\\Role_RequireDocument@resolve")
}

