#Productos
type Product {#implements GlobalSearch{
    id:ID!
    category:Category
    name:String!
    description:String
    taxe:Taxe
}
type MessageSuccessProduct {
    product:Product
    message: String
    type:String
}
extend type Query{

    #buscar productos por filtro de nombre
    filter_name_product(name: String! @where(operator: "ilike")): [Product] @all(model: "App\\Product") @middleware(checks:["auth:api", "can:product.list"])

    #productos paginador
    products_paginator: [Product] @paginate(type: "paginator" model: "App\\Product") @middleware(checks:["auth:api", "can:product.list"])

    #product(name: String! @eq id:ID @eq): Product @find(model: "App\\Product") @middleware(checks:["auth:api", "can:product.show"])
    #products: [Product!]! @all(model: "App\\Product") @middleware(checks:["auth:api", "can:product.list"])
}

extend type Mutation {

    #Crear Producto
    createProduct(
        category_id: Int @rules(apply: ["required","integer"])
        name: String @rules(apply: ["required", "max:255","unique:products,name"])
        description: String @rules(apply: ["max:255"])
        tax_id: Int @rules(apply: ["required","integer"])
    ):MessageSuccessProduct @field(resolver: "App\\GraphQL\\Mutations\\CreateProduct@resolve") @middleware(checks:["auth:api", "can:product.create"])

    #Actualizar Producto
    updateProduct(
        id: ID! @rules(apply: ["required"])
        category_id: Int
        name: String
        description: String @rules(apply: ["max:255"])
        tax_id: Int @rules(apply: ["integer"])
    ): MessageSuccessProduct @field(resolver: "App\\GraphQL\\Mutations\\UpdateProduct@resolve") @middleware(checks:["auth:api", "can:product.edit"])

    #Eliminar Producto
    deleteProduct(
        id: ID!
    ): MessageSuccessProduct @field(resolver: "App\\GraphQL\\Mutations\\DeleteProduct@resolve") @middleware(checks:["auth:api", "can:product.destroy"])
}
