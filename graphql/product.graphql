#Productos
type Product {#implements GlobalSearch{
    id:ID!
    category:Category
    name:String!
    description:String    
}
type MessageSuccessProduct {
    product:Product
    message: String
}
extend type Query{
    #Products
    filter_name_product(name: String! @where(operator: "ilike")): [Product] @all(model: "App\\Product") @middleware(checks:["auth:api"])
    product(name: String! @eq id:ID @eq): Product @find(model: "App\\Product")@middleware(checks:["auth:api"])
    products: [Product!]! @all(model: "App\\Product")@middleware(checks:["auth:api"])
    products_paginator: [Product] @paginate(type: "paginator" model: "App\\Product")@middleware(checks:["auth:api"])
}
extend type Mutation {
    #Product
    createProduct(
        category_id: Int! @rules(apply: ["required","integer"])
        name: String! @rules(apply: ["required", "max:255"])
        description: String @rules(apply: ["max:255"])
    ):MessageSuccessProduct @field(resolver: "App\\GraphQL\\Mutations\\CreateProduct@resolve") @middleware(checks:["auth:api"])
    updateProduct(
        id: ID! @rules(apply: ["required"])
        category_id: Int! @rules(apply: ["required"])
        name: String! @rules(apply: ["required", "max:255"])
        description: String @rules(apply: ["max:255"])
    ): Product @update(model: "App\\Product")
}
